openapi: 3.0.2
info:
  version: 1.0.0
  title: KB Rest API
  description: KB Rest API
  license:
    name: Apache 2.0
servers:
  - url:  /kb-api/api
    description: "Tomcat server installation"
  - url:  /kb-api-ws/api
    description: "Jetty server installation"
tags:
  - name: test
    description: "Test og under udvikling APIs"
  - name: solr
    description: "Solr API"
paths:
  /rest/ping:
    get:
      tags:
        - "test"
      summary: Ping the server to check if the server is reachable.
      operationId: ping
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /get:
    get:
      tags:
        - "test"
      summary: Request a resource available at the Royal Danish Library
      operationId: getResource
      parameters:
        - in: query
          name: id
          description: The ID for a resource
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Resource as binary
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404':
          description: Response if the ID was unknown
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /lookup:
    get:
      tags:
        - "test"
      summary: Request meta data available at the Royal Danish Library
      operationId: getMetaData
      parameters:
        - in: query
          name: ids
          description: One or more IDs for meta data records
          required: true
          schema:
            type: array
            items:
              type: string
            minItems: 1
        - in: query
          name: format
          description: Optional delivery format for the meta data
          required: false
          schema:
            type: string
            enum:
              - json
            default: json
      responses:
        '200':
          description: >-
            A list of [id, json] pairs with the requested IDs and their meta
            data. IDs which could not be resolved are removed from the list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IdMetaPairs'
  /hello:
    get:
      tags:
        - "test"
      summary: 'Request a Hello World message, for testing purposes'
      operationId: getGreeting
      parameters:
        - name: alternateHello
          in: query
          description: Optional alternative to using the word 'Hello' in the reply
          required: false
          schema:
            type: string
            default: World
      responses:
        '200':
          description: A JSON structure containing a Hello World message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloReply'
  /search/{collection}/{qt}:
    get:
      tags:
        - "solr"
      summary: This API returns a resources (metadata) available at the Royal Danish Library
      operationId: getCollectionByQuery
      parameters:
        - name: collection
          in: path
          description: A unique identifier for the collections search
          required: true
          schema:
            type: string
        - name: qt
          in: path
          description: Request handler
          required: true
          schema:
            type: string
            default: "select"
        - name: q
          in: query
          description: Query string for solr data records
          required: true
          schema:
            type: string
            default: ""
          example: "*:*"
          allowReserved: true
        - name: fq
          in: query
          description: Filter query. A query string that limits the query results without influencing their scores. Single filter query example - "type:text" or "type:text OR author:Ubekendt" The fq parameter can be specified multiple times in a query.
          required: false
          allowReserved: true
          schema:
            type: array
            items:
              type: string
          example: [""]
        - name: sort
          in: query
          description: Sort field/direction. The field on which to sort, followed by a space and direction (desc or asc).
          required: false
          schema:
            type: string
            default: ""
          allowReserved: true
          examples:
            emptySortField:
              summary: Empty sort field
              value: ""
            oneSortField:
              summary: Example of a single sort field
              value: "score desc"
            multipleSortFields:
              summary: Example of a multiple sort fields
              value: "score desc, width_pixels asc"
        - name: start
          in: query
          description: Number of leading documents to skip.
          required: false
          schema:
            type: integer
            default: 0
          example: 0
        - name: rows
          in: query
          description: Max results per page. This sets the "page size" for paginated search results.
          required: false
          schema:
            type: integer
            default: 10
        - name: fl
          in: query
          description: Field List. The list of fields to return in the query results.
          required: false
          schema:
            type: string
            default: ""
          allowReserved: true
          examples:
            emptyField:
              summary: Empty field
              value: ""
            oneField:
              summary: Example of a single field
              value: "author"
            multipleFields:
              summary: Example of a multiple fields
              value: "author, title"
        - name: df
          in: query
          description: Default field. Used to configure the q and fq parameters. If not specified, the default field is text
          required: false
          schema:
            type: string
            default: ""
        - name: wt
          in: query
          description: Response writer.
          required: false
          schema:
            type: string
            default: "json"
            enum: [json, xml]
        - name: facet
          in: query
          description: Enable faceting. If set to true, this parameter enables facet counts in the query response. If set to false, this parameter disables faceting. None of the other parameters listed below will have any effect unless this parameter is set to true. The default value is blank (false).
          required: false
          schema:
            type: boolean
            default: false
        - name: facet.field
          in: query
          description: The facet.field parameter identifies a field that should be treated as a facet. To see facet counts from all documents (q=*:*) turn on faceting (facet=true), and specify the field to facet on via the facet.field parameter. If you only want facets, and no document contents, specify rows=0.
          required: false
          schema:
            type: string
            default: ""
          examples:
            emptyFacetField:
              summary: Example of a empty facet field
              value: ""
            oneFacetField:
              summary: Example of a single facet field
              value: "type"
            multipleFacetField:
              summary: Example of a multiple facet field
              value: "type, author"
        - name: facet.prefix
          in: query
          description: The facet.prefix parameter limits the terms on which to facet to those starting with the given string prefix. This does not limit the query in any way, only the facets that would be returned in response to the query.
          required: false
          schema:
            type: string
            default: ""
          examples:
            emptyFacetPrefix:
              summary: Example of a empty facet prefix
              value: ""
            oneFacetPrefix:
              summary: Example of a single facet prefix
              value: "ad"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                  type: object
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Metadata with the spedified query was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    IdMetaPairs:
      type: object
      properties:
        id:
          type: string
        meta:
          type: string
    HelloReply:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: Greeting from the API
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
          
        
        
        