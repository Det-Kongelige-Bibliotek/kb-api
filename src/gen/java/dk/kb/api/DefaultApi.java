package dk.kb.api;

import dk.kb.api.model.Error;
import java.io.File;
import dk.kb.api.model.HelloReply;
import dk.kb.api.model.IdMetaPairs;

import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;
import javax.ws.rs.*;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.MediaType;
import org.apache.cxf.jaxrs.ext.multipart.*;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * KB API
 *
 * <p>No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 */
@Path("/")
public interface DefaultApi  {

    /**
     * Request a Hello World message, for testing purposes
     *
     */
    @GET
    @Path("/hello")
    @Produces({ "application/json" })
    @Operation(summary = "Request a Hello World message, for testing purposes", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A JSON structure containing a Hello World message", content = @Content(schema = @Schema(implementation = HelloReply.class))) })
    public HelloReply getGreeting(@QueryParam("alternateHello") String alternateHello);

    /**
     * Request meta data available at the Royal Danish Library
     *
     */
    @GET
    @Path("/lookup")
    @Produces({ "application/json" })
    @Operation(summary = "Request meta data available at the Royal Danish Library", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A list of [id, json] pairs with the requested IDs and their meta data. IDs which could not be resolved are removed from the list", content = @Content(array = @ArraySchema(schema = @Schema(implementation = IdMetaPairs.class)))) })
    public List<IdMetaPairs> getMetaData(@QueryParam("ids") @NotNull @Size(min=1) List<String> ids, @QueryParam("format") String format);

    /**
     * Request a resource available at the Royal Danish Library
     *
     */
    @GET
    @Path("/get")
    @Produces({ "application/octet-stream", "application/json" })
    @Operation(summary = "Request a resource available at the Royal Danish Library", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Resource as binary", content = @Content(schema = @Schema(implementation = File.class))),
        @ApiResponse(responseCode = "404", description = "Response if the ID was unknown", content = @Content(schema = @Schema(implementation = Error.class))) })
    public File getResource(@QueryParam("id") @NotNull String id);
}
